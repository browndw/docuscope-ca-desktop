name: Build Python Binary

on:
  push:
    tags: ["v*.*.*"]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build-python-binary:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 240
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-name: docuscope-x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-name: docuscope-x86_64-pc-windows-msvc.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-name: docuscope-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-name: docuscope-aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11.9"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11.9-${{ hashFiles('**/poetry.lock') }}

      - name: Cache PyInstaller build
        uses: actions/cache@v3
        with:
          path: |
            build/
            dist/
          key: pyinstaller-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('entrypoint.py', 'entrypoint.spec', 'requirements-deploy.txt') }}
          restore-keys: |
            pyinstaller-${{ runner.os }}-${{ matrix.target }}-

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with build

      - name: Build Python package
        run: poetry build

      - name: Install deployment requirements
        run: |
          poetry run pip install -r requirements-deploy.txt
          poetry run pip install pyinstaller

      - name: Create PyInstaller binary
        run: |
          echo "Starting PyInstaller build..."
          echo "This may take several minutes, please be patient..."
          # Run PyInstaller with periodic progress updates
          poetry run pyinstaller entrypoint.spec --log-level=WARN --noconfirm &
          PYINSTALLER_PID=$!
          
          # Monitor progress
          while kill -0 $PYINSTALLER_PID 2>/dev/null; do
            echo "PyInstaller build still running... ($(date))"
            sleep 30
          done
          
          # Wait for the process to complete
          wait $PYINSTALLER_PID
          PYINSTALLER_EXIT_CODE=$?
          
          if [ $PYINSTALLER_EXIT_CODE -eq 0 ]; then
            echo "PyInstaller build completed successfully"
          else
            echo "PyInstaller build failed with exit code $PYINSTALLER_EXIT_CODE"
            exit $PYINSTALLER_EXIT_CODE
          fi

      - name: Verify binary was created
        run: |
          if [ -f "./dist/entrypoint" ]; then
            echo "Binary created successfully"
            ls -la ./dist/entrypoint
          else
            echo "Binary not found!"
            ls -la ./dist/
            exit 1
          fi

      - name: Import Apple Developer certificate (macOS only)
        if: runner.os == 'macOS'
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Skip if certificate is not available
          if [[ -z "$APPLE_CERTIFICATE_P12" ]]; then
            echo "Apple Developer certificate not available, skipping code signing"
            exit 0
          fi
          
          # Generate a temporary keychain password
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          
          # Import certificate
          echo "$APPLE_CERTIFICATE_P12" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          
          # Set partition list to allow codesign to access the key
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Clean up
          rm certificate.p12

      - name: Sign Python binary (macOS only)
        if: runner.os == 'macOS'
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
        run: |
          # Skip if certificate is not available
          if [[ -z "$APPLE_CERTIFICATE_P12" ]]; then
            echo "Apple Developer certificate not available, skipping code signing"
            exit 0
          fi
          
          # Sign the binary with hardened runtime
          codesign --force --verify --verbose --sign "$APPLE_SIGNING_IDENTITY" --options runtime ./dist/entrypoint
          
          # Verify signature
          codesign --verify --verbose=2 ./dist/entrypoint

      - name: Notarize Python binary (macOS only)
        if: runner.os == 'macOS'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
        run: |
          # Skip if certificate is not available
          if [[ -z "$APPLE_CERTIFICATE_P12" ]]; then
            echo "Apple Developer certificate not available, skipping notarization"
            exit 0
          fi
          
          echo "=== Starting Python binary notarization ==="
          echo "Binary path: ./dist/entrypoint"
          echo "Target: ${{ matrix.target }}"
          echo "Timestamp: $(date)"
          
          # Create a zip file for notarization
          echo "Creating zip file for notarization..."
          ditto -c -k --keepParent ./dist/entrypoint "entrypoint-${{ matrix.target }}.zip"
          echo "Zip file created: entrypoint-${{ matrix.target }}.zip ($(ls -lh 'entrypoint-${{ matrix.target }}.zip' | awk '{print $5}'))"
          
          # Submit for notarization
          echo "=== Submitting Python binary for notarization ==="
          echo "This should be faster than full app notarization"
          echo "Apple ID: $APPLE_ID"
          echo "Team ID: $APPLE_TEAM_ID"
          echo "Submission time: $(date)"
          echo ""
          
          # Submit without --wait first to get submission ID
          echo "Submitting to Apple notarization service..."
          SUBMISSION_OUTPUT=$(xcrun notarytool submit "entrypoint-${{ matrix.target }}.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --output-format json)
          
          echo "Submission response:"
          echo "$SUBMISSION_OUTPUT"
          
          # Extract submission ID
          SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
          echo "Submission ID: $SUBMISSION_ID"
          
          if [[ -n "$SUBMISSION_ID" ]]; then
            echo "=== Monitoring Python binary notarization progress ==="
            echo "Checking status every 60 seconds..."
            
            while true; do
              STATUS_OUTPUT=$(xcrun notarytool info "$SUBMISSION_ID" \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_PASSWORD" \
                --team-id "$APPLE_TEAM_ID" \
                --output-format json)
              
              STATUS=$(echo "$STATUS_OUTPUT" | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
              echo "$(date): Status = $STATUS"
              
              case "$STATUS" in
                "Accepted")
                  echo "=== Python binary notarization SUCCESSFUL ==="
                  echo "Stapling notarization to binary..."
                  xcrun stapler staple ./dist/entrypoint
                  echo "Notarization stapled successfully"
                  break
                  ;;
                "Rejected")
                  echo "=== Python binary notarization FAILED ==="
                  echo "Full status output:"
                  echo "$STATUS_OUTPUT"
                  echo "Getting detailed log..."
                  xcrun notarytool log "$SUBMISSION_ID" \
                    --apple-id "$APPLE_ID" \
                    --password "$APPLE_PASSWORD" \
                    --team-id "$APPLE_TEAM_ID"
                  exit 1
                  ;;
                "In Progress")
                  echo "$(date): Still processing... waiting 60 seconds"
                  sleep 60
                  ;;
                *)
                  echo "$(date): Unknown status '$STATUS', waiting 60 seconds"
                  sleep 60
                  ;;
              esac
            done
          else
            echo "ERROR: Could not extract submission ID from response"
            exit 1
          fi
          
          # Clean up
          rm "entrypoint-${{ matrix.target }}.zip"
          echo "=== Python binary notarization process completed ==="

      - name: Rename binary for target platform
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp ./dist/entrypoint.exe ./dist/${{ matrix.binary-name }}
          else
            cp ./dist/entrypoint ./dist/${{ matrix.binary-name }}
          fi

      - name: Upload Python package artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ matrix.target }}
          path: dist/*.tar.gz
          retention-days: 30

      - name: Upload PyInstaller binary
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-binary-${{ matrix.target }}
          path: ./dist/${{ matrix.binary-name }}
          retention-days: 30

      - name: Upload PyInstaller directory (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          if [ -d "./dist/entrypoint/" ]; then
            echo "PyInstaller directory found, uploading as artifact"
            echo "HAS_DIRECTORY=true" >> $GITHUB_ENV
          else
            echo "PyInstaller directory not found, skipping directory upload"
            echo "HAS_DIRECTORY=false" >> $GITHUB_ENV
          fi

      - name: Upload PyInstaller directory artifact (Windows only)
        if: matrix.os == 'windows-latest' && env.HAS_DIRECTORY == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-directory-${{ matrix.target }}
          path: ./dist/entrypoint/
          retention-days: 30
