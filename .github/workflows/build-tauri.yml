name: Build Tauri App

on:
  workflow_dispatch:
  # Trigger after python binary build completes
  workflow_run:
    workflows: ["Build Python Binary"]
    types: [completed]
    branches: [main]

defaults:
  run:
    shell: bash

jobs:
  build-tauri:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-name: docuscope-x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-name: docuscope-x86_64-pc-windows-msvc.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-name: docuscope-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-name: docuscope-aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Download PyInstaller binary from previous workflow
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: pyinstaller-binary-${{ matrix.target }}
          path: ./temp-binary/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Download PyInstaller binary (manual/push trigger)
        if: github.event_name != 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: pyinstaller-binary-${{ matrix.target }}
          path: ./temp-binary/

      - name: Download PyInstaller directory (Windows only)
        if: matrix.os == 'windows-latest'
        continue-on-error: true
        id: download-directory
        uses: actions/download-artifact@v4
        with:
          name: pyinstaller-directory-${{ matrix.target }}
          path: ./tauri/src-tauri/binaries/_internal/

      - name: Check if PyInstaller directory was downloaded
        if: matrix.os == 'windows-latest'
        run: |
          if [ -d "./tauri/src-tauri/binaries/_internal/" ] && [ "$(ls -A ./tauri/src-tauri/binaries/_internal/)" ]; then
            echo "PyInstaller directory found and contains files"
            echo "HAS_INTERNAL_DIR=true" >> $GITHUB_ENV
          else
            echo "PyInstaller directory not found or empty - using single file executable"
            echo "HAS_INTERNAL_DIR=false" >> $GITHUB_ENV
          fi

      - name: Copy binary to Tauri binaries directory
        run: |
          mkdir -p ./tauri/src-tauri/binaries/
          
          # Debug: Check what was downloaded
          echo "Contents of temp-binary directory:"
          ls -la ./temp-binary/
          
          # Check if the expected binary exists
          if [[ ! -f "./temp-binary/${{ matrix.binary-name }}" ]]; then
            echo "ERROR: Expected binary './temp-binary/${{ matrix.binary-name }}' not found!"
            echo "Available files in temp-binary:"
            find ./temp-binary/ -type f -ls
            
            # Try to find any executable files
            echo "Looking for executable files:"
            find ./temp-binary/ -type f -executable -ls
            
            # Check if there's a file with similar name
            echo "All files in temp-binary:"
            ls -la ./temp-binary/
            exit 1
          fi
          
          # Copy the binary with the exact name Tauri expects
          # Tauri looks for binaries/docuscope-{target} based on the externalBin config
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows binaries need .exe extension
            cp ./temp-binary/${{ matrix.binary-name }} ./tauri/src-tauri/binaries/docuscope-${{ matrix.target }}.exe
            chmod +x ./tauri/src-tauri/binaries/docuscope-${{ matrix.target }}.exe
          else
            # Unix systems (macOS, Linux) don't need extension
            cp ./temp-binary/${{ matrix.binary-name }} ./tauri/src-tauri/binaries/docuscope-${{ matrix.target }}
            chmod +x ./tauri/src-tauri/binaries/docuscope-${{ matrix.target }}
          fi
          
          # Debug: List the binaries directory
          echo "Contents of binaries directory:"
          ls -la ./tauri/src-tauri/binaries/

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: |
            tauri/pnpm-lock.yaml
            tauri/package.json

      - name: Install Tauri dependencies
        working-directory: tauri
        run: pnpm install

      - name: Import Apple Developer certificate (macOS only)
        if: runner.os == 'macOS'
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Skip if certificate is not available
          if [[ -z "$APPLE_CERTIFICATE_P12" ]]; then
            echo "Apple Developer certificate not available, skipping code signing setup"
            exit 0
          fi
          
          # Generate a temporary keychain password
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          
          # Import certificate
          echo "$APPLE_CERTIFICATE_P12" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          
          # Set partition list to allow codesign to access the key
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Clean up
          rm certificate.p12

      - name: Build Tauri application
        working-directory: tauri
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: pnpm tauri build --target ${{ matrix.target }}

      - name: Notarize macOS app (macOS only)
        if: runner.os == 'macOS'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
        run: |
          # Skip if certificate is not available
          if [[ -z "$APPLE_CERTIFICATE_P12" ]]; then
            echo "Apple Developer certificate not available, skipping notarization"
            exit 0
          fi
          
          # Find the .app bundle
          APP_PATH=$(find ./tauri/src-tauri/target/${{ matrix.target }}/release/bundle/macos -name "*.app" | head -1)
          
          if [[ -n "$APP_PATH" ]]; then
            echo "=== Starting notarization process ==="
            echo "App path: $APP_PATH"
            echo "Target: ${{ matrix.target }}"
            echo "Timestamp: $(date)"
            
            # Create a zip file for notarization
            echo "Creating zip file for notarization..."
            ditto -c -k --keepParent "$APP_PATH" "DocuScope CA.zip"
            echo "Zip file created: DocuScope CA.zip ($(ls -lh 'DocuScope CA.zip' | awk '{print $5}'))"
            
            # Submit for notarization with detailed feedback
            echo "=== Submitting for notarization ==="
            echo "This process can take anywhere from 1-30 minutes depending on Apple's service load"
            echo "Apple ID: $APPLE_ID"
            echo "Team ID: $APPLE_TEAM_ID"
            echo "Submission time: $(date)"
            echo ""
            
            # Submit without --wait first to get submission ID
            echo "Submitting to Apple notarization service..."
            SUBMISSION_OUTPUT=$(xcrun notarytool submit "DocuScope CA.zip" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --output-format json)
            
            echo "Submission response:"
            echo "$SUBMISSION_OUTPUT"
            
            # Extract submission ID
            SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
            echo "Submission ID: $SUBMISSION_ID"
            
            if [[ -n "$SUBMISSION_ID" ]]; then
              echo "=== Monitoring notarization progress ==="
              echo "Checking status every 30 seconds..."
              
              while true; do
                STATUS_OUTPUT=$(xcrun notarytool info "$SUBMISSION_ID" \
                  --apple-id "$APPLE_ID" \
                  --password "$APPLE_PASSWORD" \
                  --team-id "$APPLE_TEAM_ID" \
                  --output-format json)
                
                STATUS=$(echo "$STATUS_OUTPUT" | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
                echo "$(date): Status = $STATUS"
                
                case "$STATUS" in
                  "Accepted")
                    echo "=== Notarization SUCCESSFUL ==="
                    echo "Stapling notarization to app..."
                    xcrun stapler staple "$APP_PATH"
                    echo "Notarization stapled successfully"
                    break
                    ;;
                  "Rejected")
                    echo "=== Notarization FAILED ==="
                    echo "Full status output:"
                    echo "$STATUS_OUTPUT"
                    echo "Getting detailed log..."
                    xcrun notarytool log "$SUBMISSION_ID" \
                      --apple-id "$APPLE_ID" \
                      --password "$APPLE_PASSWORD" \
                      --team-id "$APPLE_TEAM_ID"
                    exit 1
                    ;;
                  "In Progress")
                    echo "$(date): Still processing... waiting 30 seconds"
                    sleep 30
                    ;;
                  *)
                    echo "$(date): Unknown status '$STATUS', waiting 30 seconds"
                    sleep 30
                    ;;
                esac
              done
            else
              echo "ERROR: Could not extract submission ID from response"
              exit 1
            fi
            
            # Clean up
            rm "DocuScope CA.zip"
            echo "=== Notarization process completed ==="
          else
            echo "No .app bundle found for notarization"
          fi

      - name: Upload Tauri artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: docuscope-ca-desktop-${{ matrix.target }}
          path: |
            tauri/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            tauri/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
          retention-days: 30

      - name: Upload Tauri artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: docuscope-ca-desktop-${{ matrix.target }}
          path: |
            tauri/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
            tauri/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
          retention-days: 30

      - name: Upload Tauri artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: docuscope-ca-desktop-${{ matrix.target }}
          path: |
            tauri/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            tauri/src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app
          retention-days: 30

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-tauri
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          version=$(grep "^version" pyproject.toml | cut -d'"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create release changelog
        run: |
          pip install git-cliff==2.4.0
          git cliff --latest > RELEASE_CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: DocuScope CA Desktop v${{ steps.get_version.outputs.version }}
          body_path: RELEASE_CHANGELOG.md
          files: |
            ./artifacts/**/*.deb
            ./artifacts/**/*.AppImage
            ./artifacts/**/*.exe
            ./artifacts/**/*.msi
            ./artifacts/**/*.dmg
          draft: false
          prerelease: false
